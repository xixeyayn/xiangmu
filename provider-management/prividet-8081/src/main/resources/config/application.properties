server.port=8081
server.servlet.context-path=/
# 动态数据源
# 设置默认数据源名称
spring.datasource.primary=mysql
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=xxx123
spring.datasource.url=jdbc:mysql://localhost:3306/xiangmu1?useSSL=false
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

spring.datasource.dynamic.mysql.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.dynamic.mysql.url=jdbc:mysql://localhost:3306/xiangmu1?useSSL=false
spring.datasource.dynamic.mysql.username=root
spring.datasource.dynamic.mysql.password=xxx123
# 配置oracle
spring.datasource.dynamic.oracle.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.dynamic.oracle.url=jdbc:mysql://localhost:3306/qy_96?useSSL=false
spring.datasource.dynamic.oracle.username=root
spring.datasource.dynamic.oracle.password=root

# 配置sqlserver
spring.datasource.dynamic.sqlserver.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.dynamic.sqlserver.url=jdbc:mysql://localhost:3306/teach?useSSL=false
spring.datasource.dynamic.sqlserver.username=root
spring.datasource.dynamic.sqlserver.password=root

# 实现项目启动自动向mysql数据库去生成表和数据(初始化数据库)
# 找到所需要执行的SQL文件(classpath:sql/qy_all.sql)
# 在springboot官网说明schema只是初始化表和表结构用的，并不建议初始化数据
# schema不但可以初始化表结构也可以初始化数据(官方只是不推荐这么用)
spring.datasource.schema=classpath:sql/qy_all.sql
# 初始化数据
# spring.datasource.data=
# 项目第一次启动才会去初始化数据库--->项目启动后就有用户开始注册,下单...--->数据库就会发生变化
# 如果项目每次启动都去初始化数据库就保证了数据库每一次都是新的--->就会去覆盖用户的操作(导致数据丢失)
# 配置项目启动是否要初始化数据库
# 一共有三个值
# always:表示每一次项目启动都会去加载设置好的SQL文件，去初始化数据库
# never:项目启动不再去初始化数据库
# embedded:初始化的是内存数据库(redis,mongoDB,Hbase...),并初始化关系型数据库
spring.datasource.initialization-mode=never

mybatis.type-aliases-package=com.aaa.xie.repast.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
# 遵循java驼峰命名规则(产生自动映射@Column()),自动映射(mysql:user_name--->java:userName)
mybatis.configuration.map-underscore-to-camel-case=true

spring.application.name=memberinfo-interface

eureka.client.service-url.defaultZone=http://xie01:7081/eureka,http://xie02:7082/eureka,http://xie03:7083/eureka
eureka.instance.instance-id=interface-provider-8081

info.app.name=interface-provider-8081
info.app.port=8081
info.app.author=Xie
info.cpmpany.name=AAA Test

# 配置通用mapper
# 配置自增主键的规则(通用mapper不是只适用于mysql，还会适用于oracle...)
# 如果使用的是mysql则可以不配，因为默认就是mysql
mapper.identity=MYSQL
# 通用mapper配置(让通用mapper高可用)
mapper.mappers=tk.mybatis.mapper.common.Mapper
# 设置insert和update语句自动添加if判断
# update set user where 1 = 1 and <if test="username != ''"> username = #{username} </if>
mapper.not-empty=true
# 因为在java中的是由枚举类型的(sql语句的时候，有些是固定的-->删除状态(1:已删除，2:未删除))
# 但是通用mapper并不认识枚举类型--->所以需要进行把枚举类型转换为简单类型
# select * from user where status = 枚举值--->Integer/String(根据数据库中的类型自动进行转换)
mapper.enum-as-simple-type=true

# pagehelper通用插件
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true

